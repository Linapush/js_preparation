// Генераторы в JavaScript — это особый вид функций, которые позволяют приостанавливать своё выполнение и позже возобновлять его. 
// Они используются для создания итераторов, которые могут генерировать значения по мере необходимости. 
// Генераторы могут быть полезны для работы с большими объемами данных или асинхронными операциями.

// Основы генераторов:

// Генератор — это функция, которая используется с ключевым словом function*. Она возвращает объект-итератор, у которого есть метод next(). 
// При вызове next() выполнение функции приостанавливается на ключевом слове yield, а сам метод возвращает объект, который содержит два свойства:
// 	•	value: значение, которое возвращается функцией генератора.
// 	•	done: булевое значение, которое указывает, завершён ли процесс генерации.

// Пример базового генератора:

function* generatorExample() {
    yield 1;
    yield 2;
    yield 3;
}

const gen1 = generatorExample();

console.log(gen1.next()); // { value: 1, done: false }
console.log(gen1.next()); // { value: 2, done: false }
console.log(gen1.next()); // { value: 3, done: false }
console.log(gen1.next()); // { value: undefined, done: true }

	// •	yield приостанавливает выполнение генератора и возвращает указанное значение.
	// •	При следующем вызове next() выполнение продолжится с того места, где оно было приостановлено.

// Преимущества генераторов:

// 	1.	Ленивая загрузка (Lazy evaluation) — генераторы вычисляют значения по мере запроса.
// 	2.	Асинхронность — с помощью генераторов можно легко работать с асинхронным кодом (например, через async/await и Promise).
// 	3.	Чтение больших данных — генераторы позволяют эффективно обрабатывать большие потоки данных.

// Пример задачи на генераторы

// 	1.	Задача 1: Напишите генератор, который будет генерировать последовательность чисел от 1 до заданного числа n.

function* generateNumbers(n) {
    let i = 1;
    while (i <= n) {
        yield i++;
    }
}

const numbers = generateNumbers(5);
console.log([...numbers]); // [1, 2, 3, 4, 5]


// 2.	Задача 2: Напишите генератор, который будет чередовать значения между двумя массивами до тех пор, пока не закончатся оба массива.

function* zipArrays(arr1, arr2) {
    const length = Math.max(arr1.length, arr2.length);
    for (let i = 0; i < length; i++) {
        if (i < arr1.length) yield arr1[i];
        if (i < arr2.length) yield arr2[i];
    }
}

const result = zipArrays([1, 2, 3], ['a', 'b']);
console.log([...result]); // [1, 'a', 2, 'b', 3]


// 3.	Задача 3: Напишите генератор, который будет возвращать числа Фибоначчи до тех пор, пока не достигнет заданного предела.

function* fibonacci(limit) {
    let a = 0, b = 1;
    while (a <= limit) {
        yield a;
        [a, b] = [b, a + b];
    }
}

const fib1 = fibonacci(20);
console.log([...fib1]); // [0, 1, 1, 2, 3, 5, 8, 13]

// Эти задачи помогут вам освоить работу с генераторами, их использование в различных сценариях и понимание их особенностей.


// 1. Codewars - Фибоначчи
// Задача: Написать генератор чисел Фибоначчи.

function* fibonacci(limit) {
    let a = 0, b = 1;
    while (a <= limit) {
        yield a;
        [a, b] = [b, a + b];
    }
}

const fib2 = fibonacci(20);
console.log([...fib2]); // [0, 1, 1, 2, 3, 5, 8, 13]

// Здесь генератор генерирует последовательность чисел Фибоначчи до заданного предела (в данном случае 20). Генератор приостанавливается на каждом шаге и продолжает работу с того места, где был остановлен ￼.


// 2. LeetCode - Перебор чисел от 1 до n
// Задача: Написать генератор чисел от 1 до n.

function* range(n) {
    for (let i = 1; i <= n; i++) {
        yield i;
    }
}

const gen2 = range(5);
console.log([...gen2]); // [1, 2, 3, 4, 5]

// Генератор range используется для последовательного возврата чисел от 1 до заданного n. Это решение может быть полезно при необходимости обработки больших диапазонов чисел, например, для построения итераторов ￼.


// 3. Exercism - Итерирование по строкам
// Задача: Написать генератор для итерации по строкам, который будет разделять строку на слова и возвращать их по одному.


function* words(string) {
    const regex = /\S+/g;  // регулярное выражение для поиска слов
    let match;
    while ((match = regex.exec(string)) !== null) {
        yield match[0];  // возвращает слово
    }
}

const gen3 = words("Hello World from Exercism");
console.log([...gen3]); // ['Hello', 'World', 'from', 'Exercism']

// Генератор words делит строку на слова и возвращает их по очереди. Это удобный способ разделить текст и обработать его по частям ￼.


// 4. freeCodeCamp - Генератор простых чисел
// Задача: Написать генератор для вывода простых чисел.

function* primes() {
    let num = 2;
    while (true) {
        if (isPrime(num)) {
            yield num;
        }
        num++;
    }
}

function isPrime(n) {
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            return false;
        }
    }
    return true;
}

const gen = primes();
console.log([...Array(10).keys()].map(() => gen.next().value)); // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]

// генератор бесконечно возвращает простые числа. для получения первых 10 простых чисел создаём массив и запрашиваем у генератора нужное количество значений.
// генераторы могут быть использованы для создания итераторов, обработки последовательностей и работы с ленивай загрузкой данных.